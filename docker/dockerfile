# 从源中pull
# tensorflow目前不支持10.1以上版本
FROM nvidia/cuda:10.0-cudnn7-runtime-ubuntu18.04

# ------------------设置变量------------------
# ENV data_path=/data
# ENV code_path=/Codes

# ----------------设置共享磁盘-----------------
# 新建容器卷
# 容器之间数据共享  docker命令执行  '--volume-from 容器id'
# 容器卷的生命周期会一直持续到没有容器使用
# 由于没有指定挂载到的宿主机目录，默认挂载到宿主机的/var/lib/docker/volumes下的一个随机名称的目录下
# 目前未发现可以在dockerfile直接将宿主目录挂载到容器的命令,只能docker命令执行,或docker compose
# VOLUME ["${data_path}","${code_path}"]

# ----------------设置当前目录-----------------
# 新建容器时进入的目录
# WORKDIR ${code_path}

# ----------------拷贝离线文件-----------------
# add:拷贝+解压缩   copy:拷贝

# --------------镜像新建时运行命令--------------
# 换源 这里echo不加-e(和实际命令行不同)可以直接转化\n
RUN rm -f /etc/apt/sources.list &&\
echo "deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse\n\
deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse"\
    >>/etc/apt/sources.list
# 安装
RUN apt-get update &&\
apt-get install -y --no-install-recommends \
    software-properties-common \
    curl \
    apt-utils \
    python3 \
    python3-dev \
    git \
    gcc g++ gdb make cmake \
    && apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# 配置git
RUN git config --global user.name "staillyd" &&\
git config --global user.email "lan1106628183@163.com"

# python3 pip
RUN curl -O https://bootstrap.pypa.io/get-pip.py && \
    python3 get-pip.py && \
    rm get-pip.py && \
    python3 -m pip config set global.index-url http://pypi.douban.com/simple/ &&\
    python3 -m pip config set global.trusted-host pypi.douban.com

# 常用库
# numpy==1.16.4只是为了消除tensorflow1.14.0与numpy>1.16.4的feature警告，无其他特殊含义
RUN python3 -m pip --no-cache-dir install \
    numpy==1.16.4 \
    pandas \
    scipy \
    scikit-learn \
    opencv-python \
    Pillow \
    matplotlib \
    Cython \
    numba

# 深度框架
RUN pip3 --no-cache-dir install tensorflow-gpu==1.14.0
RUN pip3 --no-cache-dir install torch==1.4.0+cu100 torchvision==0.5.0+cu100\
        -f https://download.pytorch.org/whl/torch_stable.html

# -------------子镜像构建时运行的命令------------
# 当构建一个被继承的dickerfile时运行命令，当前镜像不执行该命令
# 父镜像在被子镜像继承后，父镜像的onbuild被触发
# ONBUILD RUN echo "father onbuild"

# --------------容器启动时暴露端口--------------
EXPOSE 1000-1010

# --------------容器启动时运行命令--------------
# 一个file里只有最后一个CMD生效.
# CMD会被docker run之后的命令参数替换;ENTRYPOINT会追加docker run之后的命令参数
# 开容器的终端
CMD ["/bin/bash"]

